// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: v1/service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DecryptionKeyService_DecryptionKey_FullMethodName    = "/protos.v1.DecryptionKeyService/DecryptionKey"
	DecryptionKeyService_GetDecryptionKey_FullMethodName = "/protos.v1.DecryptionKeyService/GetDecryptionKey"
)

// DecryptionKeyServiceClient is the client API for DecryptionKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DecryptionKeyServiceClient interface {
	DecryptionKey(ctx context.Context, in *DecryptionKeyRequest, opts ...grpc.CallOption) (DecryptionKeyService_DecryptionKeyClient, error)
	GetDecryptionKey(ctx context.Context, in *GetDecryptionKeyRequest, opts ...grpc.CallOption) (*GetDecryptionKeyResponse, error)
}

type decryptionKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDecryptionKeyServiceClient(cc grpc.ClientConnInterface) DecryptionKeyServiceClient {
	return &decryptionKeyServiceClient{cc}
}

func (c *decryptionKeyServiceClient) DecryptionKey(ctx context.Context, in *DecryptionKeyRequest, opts ...grpc.CallOption) (DecryptionKeyService_DecryptionKeyClient, error) {
	stream, err := c.cc.NewStream(ctx, &DecryptionKeyService_ServiceDesc.Streams[0], DecryptionKeyService_DecryptionKey_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &decryptionKeyServiceDecryptionKeyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DecryptionKeyService_DecryptionKeyClient interface {
	Recv() (*DecryptionKeyResponse, error)
	grpc.ClientStream
}

type decryptionKeyServiceDecryptionKeyClient struct {
	grpc.ClientStream
}

func (x *decryptionKeyServiceDecryptionKeyClient) Recv() (*DecryptionKeyResponse, error) {
	m := new(DecryptionKeyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *decryptionKeyServiceClient) GetDecryptionKey(ctx context.Context, in *GetDecryptionKeyRequest, opts ...grpc.CallOption) (*GetDecryptionKeyResponse, error) {
	out := new(GetDecryptionKeyResponse)
	err := c.cc.Invoke(ctx, DecryptionKeyService_GetDecryptionKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DecryptionKeyServiceServer is the server API for DecryptionKeyService service.
// All implementations must embed UnimplementedDecryptionKeyServiceServer
// for forward compatibility
type DecryptionKeyServiceServer interface {
	DecryptionKey(*DecryptionKeyRequest, DecryptionKeyService_DecryptionKeyServer) error
	GetDecryptionKey(context.Context, *GetDecryptionKeyRequest) (*GetDecryptionKeyResponse, error)
	mustEmbedUnimplementedDecryptionKeyServiceServer()
}

// UnimplementedDecryptionKeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDecryptionKeyServiceServer struct {
}

func (UnimplementedDecryptionKeyServiceServer) DecryptionKey(*DecryptionKeyRequest, DecryptionKeyService_DecryptionKeyServer) error {
	return status.Errorf(codes.Unimplemented, "method DecryptionKey not implemented")
}
func (UnimplementedDecryptionKeyServiceServer) GetDecryptionKey(context.Context, *GetDecryptionKeyRequest) (*GetDecryptionKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDecryptionKey not implemented")
}
func (UnimplementedDecryptionKeyServiceServer) mustEmbedUnimplementedDecryptionKeyServiceServer() {}

// UnsafeDecryptionKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DecryptionKeyServiceServer will
// result in compilation errors.
type UnsafeDecryptionKeyServiceServer interface {
	mustEmbedUnimplementedDecryptionKeyServiceServer()
}

func RegisterDecryptionKeyServiceServer(s grpc.ServiceRegistrar, srv DecryptionKeyServiceServer) {
	s.RegisterService(&DecryptionKeyService_ServiceDesc, srv)
}

func _DecryptionKeyService_DecryptionKey_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DecryptionKeyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DecryptionKeyServiceServer).DecryptionKey(m, &decryptionKeyServiceDecryptionKeyServer{stream})
}

type DecryptionKeyService_DecryptionKeyServer interface {
	Send(*DecryptionKeyResponse) error
	grpc.ServerStream
}

type decryptionKeyServiceDecryptionKeyServer struct {
	grpc.ServerStream
}

func (x *decryptionKeyServiceDecryptionKeyServer) Send(m *DecryptionKeyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DecryptionKeyService_GetDecryptionKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDecryptionKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecryptionKeyServiceServer).GetDecryptionKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecryptionKeyService_GetDecryptionKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecryptionKeyServiceServer).GetDecryptionKey(ctx, req.(*GetDecryptionKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DecryptionKeyService_ServiceDesc is the grpc.ServiceDesc for DecryptionKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DecryptionKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.v1.DecryptionKeyService",
	HandlerType: (*DecryptionKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDecryptionKey",
			Handler:    _DecryptionKeyService_GetDecryptionKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DecryptionKey",
			Handler:       _DecryptionKeyService_DecryptionKey_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/service.proto",
}
